# -*- coding: utf-8 -*-
"""EVE Market Toolkit.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BZdTbQdFo3LPzUiLxwXqLQSN90sZAfW9
"""

#Import the dependencies
import urllib.request
import pandas as pd
import json
import warnings
import bz2

def mean_market_vol(typeID, regionID=10000002,days=0):
    """
    A method to pull the daily average market volume of a specified typeID in a region

    Args:
        typeID: TypeID of the item to pull the market volume for
        regionID: The region from which the orders should be pulled.
        days: (Optional) Limits the market history to a set amount of days

    Returns:
        Returns the average daily volume as a float value

    Raises:
        TypeError: Specified a timeframe lower than zero
    """
    with urllib.request.urlopen("https://esi.evetech.net/latest/markets/{}/history/?datasource=tranquility&type_id={}".format(regionID, typeID)) as url:
        data = json.loads(url.read().decode())
        json.dumps(data)
    df = pd.DataFrame(data)
    if days == 0:
        days = df.size
    if days > df.size:
        warnings.warn("\n The specified timeframe is longer than the market history \n Proceeding to use the full market history")
    if days <= -1:
        raise TypeError("'Days' needs to be greater than zero")
    meanValue = df["volume"].head(days).mean()
    return round(meanValue, 2)

def item_price(typeID, regionID=10000002, systemID=0, order_type='sell'):
    """
    A method to pull the min sell or max buy of a specified typeID

    Args:
        typeID: TypeID of the item to pull the price for
        regionID: The region from which the orders should be pulled.
        systemID: (Optional) Limits the orders to the system the order was made in.
        order_type: Specifies whether to return the min sell or the max buy.

    Returns:
        Returns the specified market price as a float value

    Raises:
        TypeError: Didn't specify a correct order type.
    """
    if order_type not in ['sell','buy']:
      raise TypeError("You didn't specify a valid order type")
    with urllib.request.urlopen("https://esi.evetech.net/latest/markets/{}/orders/?datasource=tranquility&order_type={}&page=1&type_id={}".format(regionID,order_type,typeID)) as url:
        data = json.loads(url.read().decode())
        json.dumps(data)
    df = pd.DataFrame(data)
    if systemID != 0:
        df = df.loc[(df['system_id']==systemID)]
    if order_type == 'sell':
        price = df['price'].min()
    if order_type == 'buy':
        price = df['price'].max()
    return price

def order_depth(typeID, regionID=10000002, systemID=0, order_type='sell',output='dataframe'):
    """
    A method to get the order depth for a specific typeID

    Args:
        typeID: TypeID of the item to pull the orders for
        regionID: The region from which the orders should be pulled.
        systemID: (Optional) Limits the orders to the system the order was made in.
        order_type: Specifies whether to display sell or buy orders

    Returns:
        Returns a list with the quantity per price
    Raises:
        TypeError: Didn't specify a correct order type or output type.
    """
    if output not in ['dataframe','dictionary','list']:
        raise TypeError("You need to specify a valid output type \n Supported types are: 'dataframe','dictionary','list'")
    if order_type not in ['sell','buy']:
      raise TypeError("You didn't specify a valid order type")
    with urllib.request.urlopen("https://esi.evetech.net/latest/markets/{}/orders/?datasource=tranquility&order_type={}&page=1&type_id={}".format(regionID,order_type,typeID)) as url:
        data = json.loads(url.read().decode())
        json.dumps(data)
    data = pd.DataFrame(data)
    data = data[['price','volume_remain']]
    data = data.rename(columns={'price':'Price','volume_remain':'Volume'})
    data = data.groupby('Price').sum()
    if order_type == 'buy':
        data = data.sort_values(by=['Price'],ascending=False)
    if output == 'dataframe':
        data = data.reset_index()
        return data
    if output == 'dictionary':
        return data.to_dict()
    if output == 'list':
        data = data.reset_index()
        return data.values.tolist()

def plot_order_depth(typeID,max_price=0,min_price=0, regionID=10000002, systemID=0, order_type='sell'):  
    """
    Plots the order depth for a specified typeID

    Args:
        typeID: TypeID of the item to pull the orders for
        max_price: Maximum item price that is shown on the plot
        min_price: Minimum item price that is shown on the plot
        regionID: The region from which the orders should be pulled.
        systemID: (Optional) Limits the orders to the system the order was made in.
        order_type: Specifies whether to display sell or buy orders

    Returns:
        Displays and area plot showing the order depth of a specific item
    Raises:
        TypeError: max or min price are values lower or equal to zero
    """
    if max_price == 0:
        max_price = item_price(typeID,regionID=regionID, systemID=systemID, order_type='sell') * 2
    if min_price == 0:
        min_price = item_price(typeID,regionID=regionID, systemID=systemID, order_type='buy') / 2
    if max_price * min_price <= 0:
        raise TypeError("Max and min price need to be greater than zero")
    df = order_depth(typeID, regionID, systemID, order_type)
    df = df.loc[(df['Price']<max_price)&(df['Price']>min_price)]
    df['Volume_cumsum'] = df['Volume'].cumsum()
    df.plot(x='Price',y='Volume_cumsum',kind='area')

#Most Important URLs
#https://www.fuzzwork.co.uk/dump/latest/invTypes.csv.bz2
#https://www.fuzzwork.co.uk/dump/latest/industryActivityMaterials.csv.bz2
#https://www.fuzzwork.co.uk/dump/latest/industryActivityProducts.csv.bz2
#https://www.fuzzwork.co.uk/dump/latest/industryActivityProbabilities.csv.bz2

def fuzz_static_dump(url='https://www.fuzzwork.co.uk/dump/latest/invTypes.csv.bz2',filename='invTypes.csv'):
    """
    Plots the order depth for a specified typeID.

    Args:
        url: Fuzzworks URL from which the csv will be downloaded.
        filename: The filename of the .csv file that got unzipped.

    Returns:
        Dataframe containing the data from the downloaded csv.
    Raises:
        ValueError: Did not specify a valid URL.
        FileNotFoundError: No file with the specified filename found.
    """
    try:
        invTypes = pd.read_csv(filename)
        return invTypes
    except FileNotFoundError:
        url = url
        urllib.request.urlretrieve(url, str(filename)+'.bz2')  
        zipfile = bz2.BZ2File(str(filename)+'.bz2')
        data = zipfile.read() 
        open(filename, 'wb').write(data)
        invTypes = pd.read_csv(filename)
        return invTypes

def NameToID(typeName):
    """
    Converts an item name to its typeID

    Args:
        typeName: Name of the item/asset to find the typeID of.

    Returns:
        Integer Value with the typeID.
    Raises:
        TypeError: No typeName specified.
        IndexError: No item found with the specified typeName.
    """
    invTypes = fuzz_static_dump()
    df = invTypes.loc[(invTypes['typeName']==str(typeName))]
    typeID = df['typeID'].iloc[0]
    return typeID

def IDToName(typeID):
    """
    Converts an item name to its typeID

    Args:
        typeID: type id to find the name of.

    Returns:
        String value with the item name.
    Raises:
        TypeError: No typeID specified.
        IndexError: No item found with the specified typeID.
    """
    invTypes = fuzz_static_dump()
    df = invTypes.loc[(invTypes['typeID']==typeID)]
    typeID = df['typeName'].iloc[0]
    return typeID
